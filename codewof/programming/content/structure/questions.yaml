say-hello:
  type: program
  test-cases:
    1: normal

# ride-share:
#   type: function
#   test-cases:
#     1: normal
#     2: normal

# TODO: Skulpt has issues with round function compared to Python so needs further testing
# rugby-score:
#   type: function
#   test-cases:
#     1: normal
#     2: normal

# TODO: Skulpt has issues with round function compared to Python so needs further testing
# car-park:
#   type: function
#   test-cases:
#     1: normal
#     2: normal

add-10:
  type: program
  test-cases:
    1: normal
    2: normal

doubler:
  type: function
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: exceptional

double-evens:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'if number // 2 == 0:'
    - 'return number x 2'
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: exceptional

countdown:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'for i in range(num):'
    - 'while num > 1:'
  test-cases:
    1: normal
    2: normal
    3: exceptional

repeated-add-10:
  types:
    - program
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: exceptional

factorial:
  types:
    - function
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: normal

ticket-calculator:
  type: debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 1
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: normal

rectangle-area:
  types:
    - program
  test-cases:
    1: normal
    2: normal
    3: normal

where-is:
  types:
    - program
  test-cases:
    1: normal
    2: normal

pieces-of-chocolate:
  types:
    - function
  test-cases:
    1: normal
    2: normal

print-codewof:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'print("Welcome to codeWOF")'
    - 'return "Welcome to codeWOF!"'
  test-cases:
    1: normal

greeting:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'print("Hello" + name + "!")'
    - 'print("Hello " + name)'
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

string-concatenation:
  types:
    - program
  test-cases:
    1: normal
    2: normal
    3: exceptional

bus-info:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'print("Service " + bus_id + " is due in " + str(minutes_away) + " minutes time.")'
    - 'return "Service " + bus_id + " is due in " + minutes_away + " minutes time."'
  test-cases:
    1: normal
    2: exceptional
    3: normal
    4: exceptional

voting-age:
  types:
    - program
  test-cases:
    1: normal
    2: normal
    3: exceptional
    4: exceptional
    5: exceptional
    6: exceptional

over-the-limit:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'return "True"'
    - 'return "False"'
    - 'if mcg_per_litre >= 250:'
  test-cases:
    1: normal
    2: normal
    3: exceptional
    4: exceptional
    5: exceptional
    6: exceptional
    7: exceptional

low-battery:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'if percent <= 20:'
    - 'is_low = "True"'
    - 'is_low = "False"'
  test-cases:
    1: normal
    2: exceptional
    3: exceptional
    4: normal
    5: exceptional
    6: exceptional

full-name:
  type: debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 0
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

hours-to-seconds:
  type: debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 1
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: normal

how-many-dozens:
  type: debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 0
  test-cases:
    1: normal
    2: normal
    3: exceptional
    4: exceptional
    5: exceptional

favourite-number:
  type: debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 1
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: normal
    6: normal
    7: normal
    8: normal

string-too-long:
  type: debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 1
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: normal
    6: normal
    7: normal


price-in-budget:
  type: debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 1
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: normal
    6: normal

find-highest-number:
  type: debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 1
  test-cases:
    1: normal
    2: normal
    3: normal
    4: exceptional
    5: exceptional

shutdown-machine:
  type: program
  test-cases:
    1: exceptional
    2: exceptional
    3: normal
    4: normal
    5: exceptional
    6: exceptional

triangle-pattern:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'for i in range(1, x):'
    - 'print(" ")'
    - 'print("*")'
    - 'print(i * " ")'
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

divisible-by-3:
  types:
    - function
  test-cases:
    1: normal
    2: normal
    3: normal

reverse-string:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'for char in range(len(string), -1, -1):'
    - 'for char in range(len(string) - 1, 1, 1):'
    - 'print(string[char])'
  test-cases:
    1: normal
    2: normal
    3: normal

rotate-words:
  types:
    - program
  test-cases:
    1: normal
    2: normal
    3: exceptional
    4: normal

good-password:
  types:
    - program
  test-cases:
    1: exceptional
    2: exceptional
    3: normal
    4: normal
    5: normal

shopping-list:
  types:
    - function
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

find-smallest-number:
  types:
    - debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 0
  test-cases:
    1: exceptional
    2: normal
    3: exceptional
    4: normal
    5: normal

book-titles:
  types:
   - function
   - parsons
  parsons-extra-lines:
    - 'print(name.upper())'
    - 'print(name.lower())'
    - 'print(name)'
  test-cases:
    1: normal
    2: normal
    3: normal

total-under-10:
  types:
   - function
   - parsons
  parsons-extra-lines:
    - 'if number > 10:'
    - 'total = number'
  test-cases:
    1: normal
    2: normal
    3: exceptional
    4: normal

go-tramping:
  types:
    - program
  test-cases:
    1: normal
    2: normal
    3: normal
    4: exceptional
    5: exceptional
    6: exceptional

make-even:
  types:
    - program
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: exceptional
    6: exceptional

print-score:
  types:
   - function
   - parsons
  parsons-extra-lines:
    - 'score = points / total_possible'
    - 'score = points * total_possible / 100'
    - 'print(score)'
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

h-words:
  types:
    - program
  test-cases:
    1: normal
    2: normal
    3: normal
    4: exceptional

print-pet:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'print(name + "is a " + age + "-year-old " + species + ".")'
    - 'print(name + "is a " + "age" + "-year-old " + species + ".")'
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

print-squares:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'print(num ^ 2)'
    - 'print(num x num)'
  test-cases:
    1: normal
    2: normal
    3: normal
    4: exceptional
    5: exceptional

drawn-out-string:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'print(letter + letter)'
    - 'print(length)'
    - 'print(letter)'
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

add-up-numbers:
  types:
    - debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 0
  test-cases:
    1: normal
    2: normal
    3: exceptional
    4: exceptional
    5: normal

evens-out:
  types:
    - debugging
  number_of_read_only_lines_top: 3
  number_of_read_only_lines_bottom: 1
  test-cases:
    1: normal
    2: normal
    3: exceptional
    4: exceptional
    5: normal

happy-birthday:
  types:
    - program
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: exceptional

give-me-5:
  types:
    - program
  test-cases:
    1: normal
    2: exceptional
    3: normal
    4: normal
    5: normal

while-away:
  types:
    - debugging
  number_of_read_only_lines_top: 2
  number_of_read_only_lines_bottom: 0
  test-cases:
    1: normal
    2: exceptional
    3: normal
    4: normal

times-2:
  types:
    - debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 0
  test-cases:
    1: normal
    2: exceptional
    3: normal
    4: exceptional
    5: normal
    6: exceptional

days-to-target:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'population * 2'
    - 'population = population ** 2'
    - 'print(days)'
  test-cases:
    1: normal
    2: normal
    3: exceptional
    4: normal
    5: normal

roll-call:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'print(name.title())'
    - 'print(name.capitalize())'
    - 'print(name.swapcase())'
  test-cases:
    1: normal
    2: normal
    3: normal
    4: exceptional

lunch:
  types:
    - program
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

signature:
  types:
    - program
  test-cases:
    1: normal
    2: normal
    3: normal

print-bigger-number:
  types:
    - debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 0
  test-cases:
    1: normal
    2: normal
    3: normal
    4: exceptional
    5: exceptional

rectangle-pattern:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'for i in range(width):'
    - 'print("height * "#")'
    - 'print("#")'
    - 'print(width * height)'
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

leap-year:
  types:
    - function
  test-cases:
    1: normal
    2: normal
    3: normal
    4: exceptional

discounted-cost:
  types:
    - debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 2
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

celsius-to-fahrenheit:
  type: function
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: normal

fahrenheit-to-celsius:
  type: function
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: normal

rollercoaster-ride:
  types:
    - function
    - parsons
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

how-many-dogs:
  types:
    - debugging
  number_of_read_only_lines_top: 2
  number_of_read_only_lines_bottom: 1
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

total-evens:
  types:
    - debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 0
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

driver-speed:
  types:
    - function
    - parsons
  test-cases:
    1: normal
    2: normal
    3: normal

fizz-buzz:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - "elif num / 3 == 0:"
    - "elif num / 5 == 0:"
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

inside-outside:
  type: debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 0
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: normal

eight-is-great:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'if a or b == 8:'
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: normal

sum-lucky-7:
  types:
    - function
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: normal

duck-goose:
  types:
    - program
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

remove-bugs:
  types:
    - debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 0
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

nth-to-last:
  types:
    - debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 1
  test-cases:
    1: normal
    2: normal
    3: normal

factorial-debug:
  types:
    - debugging
  number_of_read_only_lines_top: 3
  number_of_read_only_lines_bottom: 3
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: normal

sum-unlucky-7:
  types:
    - debugging
  number_of_read_only_lines_top: 3
  number_of_read_only_lines_bottom: 1
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: normal

pass-the-parcel:
  types:
    - debugging
  number_of_read_only_lines_top: 1
  number_of_read_only_lines_bottom: 1
  test-cases:
    1: normal
    2: normal
    3: normal

end-of-file:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'return(file)'
    - 'file += "EOF"'
  test-cases:
    1: normal
    2: normal
    3: exceptional

is-this-the-end:
  types:
    - function
    - parsons
  parsons-extra-lines:
    - 'print(x == y)'
    - 'y -= 1'
    - 'y = items[index]'
  test-cases:
    1: normal
    2: normal
    3: normal
    4: exceptional

long-count:
  types:
    - parsons
  parsons-extra-lines:
    - 'length = 1'
    - 'return items'
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

playing-card:
  types:
    - program
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

marco-polo:
  types:
    - program
  test-cases:
    1: normal
    2: normal
    3: normal

say-kia-ora:
  types:
    - program
  test-cases:
    1: normal

favourite-food:
  types:
    - program
  test-cases:
    1: normal
    2: normal
    3: normal

even-or-odd:
  types:
    - function
  test-cases:
    1: exceptional
    2: normal
    3: normal
    4: exceptional
    5: normal

less-than-6:
  types:
    - function
  test-cases:
    1: normal
    2: exceptional
    3: normal
    4: exceptional
    5: exceptional

best-paper-scissors-rock:
  types:
    - program
  test-cases:
    1: normal
    2: normal
    3: normal

guessing-game:
  types:
    - program
  test-cases:
    1: normal
    2: normal
    3: exceptional
    4: normal
    5: normal
    6: exceptional

rectangle-perimeter:
  types:
    - debugging
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal

square-perimeter:
  types:
    - function
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: normal

square-area:
  types:
    - function
  test-cases:
    1: normal
    2: normal
    3: normal
    4: normal
    5: normal
